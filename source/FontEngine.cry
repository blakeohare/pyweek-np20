
class FontEngine {
	static field raw_letters_by_color = null;

	static function initialize() {

		// These values are in the composite image generator
		LETTERS = '`abcdefghijklmnopqrstuvwxyz.?!/-,\':0123456789$%+^&#'

		WIDTH = 7 * 2
		HEIGHT = 9 * 2

		raw = ImageLibrary.images['text/composite.png'];
		FontEngine.raw_letters_by_color = {};
		row = 0;
		COLORS = 'white gray red orange yellow green blue purple'.split(' ');
		for (color : COLORS) {
			letters = {};
			FontEngine.raw_letters_by_color[color] = letters;
			y = row * HEIGHT;
			x = 0;
			col = 0;
			for (letter : LETTERS) {
				x = col * WIDTH;
				col++;
				// YOU LEFT OFF HERE REALIZING THAT YOU NEED CROP FUNCTIONALITY
				// I could do this by using drawRegion, but I don't want to add more clutter.
				img = pygame.Surface((WIDTH, HEIGHT)).convert()
				img.fill((255, 0, 255))
				img.blit(raw, (-x, -y))
				img.set_colorkey((255, 0, 255))
				letters[letter] = img
				if letter.lower() != letter.upper():
					letters[letter.lower()] = img
					letters[letter.upper()] = img
			
			row += 1
		self.space_size = letters['a'].get_width()
		
	def render(self, screen, text, color, x, y):
		if self.raw_letters_by_color == None: self.initialize()
		font = self.raw_letters_by_color[color]
		orig_x = x
		max_x = 0
		for char in text:
			if char == ' ':
				x += self.space_size
			elif char == '\n':
				x = orig_x
				y += HEIGHT
			else:
				char = font.get(char, None)
				if char == None:
					char = font['`']
				screen.blit(char, (x, y))
				x += char.get_width()
			if x > max_x:
				max_x = x
			
		return (x, y + HEIGHT)
		
		
TEXT = FontEngine()