import Math;

const VELOCITY = 1.5
const PI_OVER_4 = Math.PI / 4;

class Staff {

	// as a person
	field id;
	field happiness = .5;

	// as a sprite
	field x = 64;
	field y = 96;
	field direction = 's';
	field moving = false;
	field target_x = 0;
	field target_y = 0;
	field move_please = false;
	field drag_path = null;

	field holding = null;
	field velocity = 5.0;

	field playboard = null;

	// lazy-init dictionary
	// keys are 'walk_n0' through 'walk_n3' and 'stand_n' (where n can be n, s, e, w)
	field images = null;

	constructor(id) {
		// as a person
		self.id = id
	}
		
	
	function convert_vector_to_dir(x, y) {
		ang = Math.arctan(y, x);
		if (ang < -3 * PI_OVER_4 || ang > 3 * PI_OVER_4) return 'w';
		if (ang < PI_OVER_4 && ang > -PI_OVER_4) return 'e';
		if (y < 0) return 'n';
		return 's';
	}

	function update(playboard) {
		this.playboard = playboard;
		this.moving = false;
		
		if (this.drag_path != null) {
			old_x = this.x;
			old_y = this.y;
			this.drag_path.do_update(this.velocity);
			new_x = this.x;
			new_y = this.y;
			dx = new_x - old_x;
			dy = new_y - old_y;
			if (dx != 0 || dy != 0) {
				this.moving = true;
				this.direction = this.convert_vector_to_dir(dx, dy);
			}
			
			if (this.drag_path.done) {
				this.drag_path = null;
			}
		}
	}
	
	function get_current_image(rc) {
		if (this.images == null) {
			this.images = {};
			templateName = 'template' + (this.id % 4 + 1);
			for (dir : 'nsew') {
				this.images['stand_' + dir] = ImageLibrary.images.get(templateName + '_' + dir + '0.png');
				walkCounter = 0;
				for (imgId : [1, 0, 2, 0]) {
					this.images['walk_' + dir + walkCounter++] = ImageLibrary.images.get(templateName + '_' + dir + imgId + '.png');
				}
			}
		}
			
		if (this.moving) {
			return this.images['walk_' + this.direction + str((rc / 3) % 3)];
		}
		return images['stand_' + this.direction];
	}
		
	function render(rc, render_list) {
		img = this.get_current_image(rc);

		width = img.width;
		height = img.height;
		
		px = Math.floor(this.x) - width / 2;
		py = Math.floor(this.y) - height;
		
		// Image: I, sort value, image, x, y
		render_list.add(('I', self.y * 1000000 + self.x, img, px, py))
		
		//if self.playboard != None and self.playboard.selected == self:
		//    // Rectangle: R, sort value, 
		//    //render_list.append(('R', self.y * 1000000 + self.x - 1, px - 2, py - 2, img.get_width() + 4, img.get_height() + 4, (255, 255, 255)))
	
		if (this.holding != null) {
			switch (this.holding) {
				case 'iv':
					img = ImageLibrary.images['treatments/iv_bag.png'];
					break;
				case 'cucumber':
					img = ImageLibrary.images['treatments/cucumber.png'];
					break;
				case 'tape':
					img = ImageLibrary.images['treatments/tape.png'];
					break;
				case 'jacket':
					img = ImageLibrary.images['treatments/jacket.png'];
					break;
				default:
					throw new Exception("Invalid item holding." + this.holding);
			}
	
			render_list.add(('I', this.y * 1000000 + this.x + 1, img, this.x - img.width / 2, this.y - 64 - img.height));
		}
	}
}
